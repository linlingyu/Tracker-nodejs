var util = require('util'),
    identId = 0,
    core_hasOwnProperty = {}.hasOwnProperty;
module.exports = {
    defineProperties: function(obj, methods, options){
        var c = {}, item;
        for(var i in methods){
            item = c[i] = {value: methods[i]};
            if(options){
                for(var j in options[i]){
                    item[j] = options[i][j];
                }
            }
        }
        Object.defineProperties(obj, c);
    },
    /**
     * 
     */
    bind: function(func, scope){
        var xargs = arguments.length > 2 ? [].slice.call(arguments, 2) : null;
        return function () {
            var fn = baidu.lang.isString(func) ? scope[func] : func,
                args = (xargs) ? xargs.concat([].slice.call(arguments, 0)) : arguments;
            return fn.apply(scope || fn, args);
        };
    },
    /**
     * 浅复制
     */
    extend: function(target, source){
        Object.keys(source).forEach(function(item, index){
            target[item] = source[item];
        });
        return target;
    },
    /**
     * 
     */
    isPlainObject: function(obj){
        if(typeof obj !== 'object'){return;}
        try {
            if (obj.constructor &&
                !core_hasOwnProperty.call(obj, 'constructor') &&
                !core_hasOwnProperty.call(obj.constructor.prototype, 'isPrototypeOf')) {
                return false;
            }
        } catch ( e ) {
            return false;
        }
        
        var key;
        for(key in obj){break;}
        return key === undefined || core_hasOwnProperty.call( obj, key );
    },
    /**
     * 
     */
    isArray: function(array){
        return util.isArray(array);
    },
    
    /**
     * 取得一个不重复的id
     */
    getIdent: function(){
        return (identId++) + '';
    },
    /**
     * 
     */
    fileName: function(url){
        url = url.split( /[?#]/ )[ 0 ];
        return url.slice( url.lastIndexOf( '/' ) + 1 );
    },
    
    splitToLine: function(code){
//        return code.split(/\r\n|[\r\n]/);
        return code.split(/\n/);
    }
    
};