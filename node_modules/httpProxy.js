var utility = require('utility/utility'),
    interceptor = require('Interceptor');


function HttpProxy(httpServer){
    this._httpServer = httpServer;
}
utility.defineProperties(HttpProxy.prototype, {
    initialize: function(codeController){
        var me = this,
            httpServer = me._httpServer,
            inte = interceptor.create();
        //
        inte.on('filter:intercept', function(data){
            codeController.buildCode(data);
        });
        //
        httpServer.on('onresponse', function(request, response, req, res){
            var headers = res.headers,
                isHtmlOrJs = inte.isHtmlOrJavascript(headers, request.url),
                statusCode = res.statusCode,
                data = [];
            if(isHtmlOrJs){
                delete headers['content-length'];//必要
                statusCode === 304 && (statusCode = 200);//必要，不重写状态码会有缓存，导致收集数据不正确
            }
            response.writeHeader(statusCode, res.headers);//import
            res.on('data', function(chunk){data.push(chunk)});
            res.on('end', function(){
                var content = Buffer.concat(data);//取得内容
                content = inte.filter(content, request, headers);
                response.end(content);
            });
        });
    },
    
    getServer: function(){
        return this._httpServer.getHttpServer();
    },
    
    start: function(){
        this._httpServer.start();
    },
    
    stop: function(){
        
    }
});

//
exports.create = function(httpServer){
    return new HttpProxy(httpServer);
}