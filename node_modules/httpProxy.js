var utility = require('utility/utility'),
    interceptor = require('Interceptor');

function HttpProxy(httpServer){
    this._httpServer = httpServer;
}
utility.defineProperties(HttpProxy.prototype, {
    initialize: function(codeController){
        var me = this,
            httpServer = me._httpServer,
            inte = interceptor.create();
        //
        inte.on('filter:intercept', function(data){
            codeController.buildCode(data);
        });
        //
        httpServer.on('onresponse', function(request, response, req, res, timeStamp){
            var headers = res.headers,
                isHtmlOrJs = inte.isHtmlOrJavascript(headers, request.url),
                data = [];
            if(isHtmlOrJs){
                delete headers['content-length'];//必要
                
                //以下代码去掉服务器的缓存，从服务器通知浏览器不缓存
                headers['cache-control'] = 'no-store';//不缓存信息，每次访问都要到服务器较验
                headers['Pragma'] = 'no-cache';//http 1.0的常规头，同http 1.1的cache-control
                headers['expires'] = -1;//文件缓存在客户端的过期时间
                headers['etag'] = 
                headers['Last-Modified'] = new Date().toGMTString();
                //statusCode === 304 && (statusCode = 200);// statusCode 是无需重写的
            }
            response.writeHeader(res.statusCode, res.headers);//import,
            res.on('data', function(chunk){data.push(chunk)});
            res.on('end', function(){
                var time = new Date() - timeStamp;
                    content = Buffer.concat(data);//取得内容
                content = inte.filter(content, request, headers, time);
                response.end(content);
            });
        });
    },
    
    getServer: function(){
        return this._httpServer.getHttpServer();
    },
    
    start: function(){
        this._httpServer.start();
    },
    
    stop: function(){
        
    }
});

//
exports.create = function(httpServer){
    return new HttpProxy(httpServer);
}