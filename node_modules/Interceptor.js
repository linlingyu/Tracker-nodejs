var conf = require('config'),
    util = require('util'),
    url = require('url'),
    events = require('events'),
    utility = require('utility/utility'),
    socketClient = require('socketClient'),
    esprima = require('./esprima/esprima'),
    iconv = require('iconv-lite'),
    escodegen = require('escodegen'),
    piling = require('Piling'),
    tplScript = '<script type="text/javascript" %s>%s</script>',
    scriptArray = [
        util.format(tplScript, 'src="http://'+ conf.socketServer.host + ':'+ conf.socketServer.port +'/socket.io/socket.io.js"', ''),
        util.format(tplScript, '', socketClient.getCode())
    ];

var errorRegx = /^Line (\d+): Unexpected token (<|>)$/,
    lineSpliter = /\r\n|[\r\n]/,
    commentStart = '<!--',
    commentEnd = '-->',
    options = {raw: true, loc: true},
    rHtml = /<html[^>]*>/i;
    rFileType = /\.([\w\-]+)$/,//file.js?time=xxxx 这个有必要么
    rGbkMetaRegx = /<meta[^>]+charset=["']?gb[^>]+>/i,
    scriptTagRegx = /(<script [^>]*src=["'])([^"']+)(["'][^>]*>\s*<\/script>)/gi,
    filterType = {
        extensions: {
            'js': 1,
            'jse': 1,
            'json': 1
        },
        jsContentTypes: {
            'baiduapp/json': 1,
            'text/javascript': 1,
            'application/javascript': 1,
            'application/ecmascript': 1,
            'application/x-ecmascript': 1
        },
        htmlContentTypes: {
            'text/html': 1,
            'application/xhtml+xml': 1
        }
    };

function test(code){
    var ret, ast;
    try{
        ast = esprima.parse(code, options);
        ret = {status: 'OK', ast: ast};
    }catch(e){
        var match = errorRegx.test(e.message);
        ret = {
            status: match ? 'MaybeHtmlCommentError' : 'OtherError',
            error: e
        };
        match && utility.extend(ret, {
            errorMode: RegExp.$2,
            line: RegExp.$1 - 0
        });
    }
    return ret;
}

/**
 * 取得请求的contentType
 */
function getContentType(headers){
    var type = headers['content-type']
            || headers['Content-Type']
            || '';
    return type.toLowerCase();
}

/**
 * 
 */
function getExtension(pathname){
    var fileType = pathname.match(rFileType);
    return fileType && fileType[1].toLowerCase();
}
/**
 * 
 */
function getFinalCode(content, codeId){
    var tpl = '_trackerStart_("%s");\n%s\n_trackerEnd_("%s");';
    return util.format(tpl, codeId, content, codeId);
}
/**
 * 
 */
function checkGbk(contentType, content){
    return ~contentType.indexOf('gb')
        || rGbkMetaRegx.test(content);
}
/**
 * 
 */
function replaceHtmlScriptTag( s, partStart, src, partEnd ){
    var u = url.parse( src ),
        r = "tracker-random=" + Math.random();
    if(u.search){
        u.search += "&" + r;
    }else{
        u.search = r;
    }
    return partStart + url.format( u ) + partEnd;
};


/**
 * 
 */
function Interceptor(){
    events.EventEmitter.call(this);
}
util.inherits(Interceptor, events.EventEmitter);
utility.defineProperties(Interceptor.prototype, {
    esprima: function(code){
        var content = code,
            status, index, b, ret;
        while(true){
            ret = test(content);
            status = ret.status;
            if(status === 'OK'){
                return ret.ast;
            }else if(status === 'OtherError'){
//                console.log(c);
                throw ret.error;
            }else if(status === 'MaybeHtmlCommentError'){
                content = content.split( lineSpliter );
                index = ret.line - 1;
                b = content[index];
                if(ret.errorMode == '<' && ~b.indexOf(commentStart)){
                    content[index] = b.slice(0, b.lastIndexOf(commentStart));
                }else if(ret.errorMode == '>' && ~b.indexOf(commentEnd)){
                    content[index] = b.slice(0, b.lastIndexOf(commentEnd));
                }else{
                    throw ret.error;
                }
                content = content.join('\n');
            }
        }
    },
    
    escodegen: function(syntax){
        return escodegen.generate(syntax);
    },
    
    intercept: function(syntax, codeId){
        piling.addBlockStatement(syntax);//为没有大括号的if表达式加入大括号
        var content = this.escodegen(syntax);
        syntax = this.esprima(content);
        syntax = piling.recursion(syntax, codeId);
        syntax.formattedContent = content;
        return syntax;
    },
    
    isHtmlOrJavascript: function(headers, path){
        var me = this,
            u = url.parse(path),
            ext = getExtension(u.pathname),
            contentType = getContentType(headers),
            mimeType = contentType.split(';')[0],
            isHTML = mimeType in filterType.htmlContentTypes,
            isJS = ext in filterType.extensions
                || mimeType in filterType.jsContentTypes;
        return isHTML || isJS;
    },
    
    filter: function(content, request, headers, time){
        var me = this,
            path = request.url,
            u = url.parse(path),
            ext = getExtension(u.pathname),
            contentType = getContentType(headers),
            mimeType = contentType.split(';')[0],
            isHTML = mimeType in filterType.htmlContentTypes,
            isJS = ext in filterType.extensions
                || mimeType in filterType.jsContentTypes,
            isHtmlOrJs =  isHTML || isJS,
            //
            count = 0,
            origContent = content.toString(),
            isGbk, syntax, ident, formattedContent;
        
        if(!isHtmlOrJs || !origContent
            || /socket\.io\.js$/.test(path)){return content;}
            
        isGbk = checkGbk(contentType, origContent);
        isGbk && (origContent = iconv.decode(content, 'GBK'));
        if(~'text/html,application/xhtml+xml'.indexOf(mimeType)){//htmls
            //对内嵌代码进行处理
            if(scriptTagRegx.test(origContent)){//加入后缀，防止浏览器缓存
                origContent = origContent.replace(scriptTagRegx, replaceHtmlScriptTag);
            }
            //增加scoket.io
            content = origContent.replace(rHtml, function(mc){
                return mc + scriptArray.join('')
            });
        }else{//js
            //对外链js进行处理
            try{//如果出错就直接返回代码
                ident = utility.getIdent();
                syntax = me.esprima(origContent);
                syntax = me.intercept(syntax, ident);
                content = me.escodegen(syntax.ast);
                content = util.format('_trackerStart_("%s");\n%s\n_trackerEnd_("%s");',
                    ident, content, ident);
                me.emit('filter:intercept', {
                    ident: ident,
                    url: path,
                    origContent: origContent,
                    formattedContent: syntax.formattedContent,
                    execContent: content,
                    mapping: syntax.mapping,
                    loadTime: time
                });
            }catch(e){
               me._message = e.message;
               content = origContent;
               console.log('file: '+ path +', msg: ' + e.message);
            }
        }
        isGbk && (content = iconv.encode(content, 'GBK'));
        return content;
    }
});
exports.create = function(){return new Interceptor();}