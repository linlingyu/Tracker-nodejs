var util = require('util'),
    events = require('events'),
    utility = require('utility/utility'),
    socketClient = require('socketClient'),
    esprima = require('esprima'),
    iconv = require('iconv-lite'),
    escodegen = require('escodegen'),
    tplScript = '<script type="text/javascript" %s>%s</script>',
    scriptArray = [
        util.format(tplScript, 'src="http://127.0.0.1:8085/socket.io/socket.io.js"', ''),
        util.format(tplScript, '', socketClient.getCode())
    ];

var errorRegx = /^Line (\d+): Unexpected token (<|>)$/,
    lineSpliter = /\r\n|[\r\n]/,
    commentStart = '<!--',
    commentEnd = '-->',
    options = {raw: true, loc: true},
    rHtml = /<html[^>]*>/i;
    rFileType = /\.([\w\-]+)$/,//file.js?time=xxxx 这个有必要么
    filterType = {
        extensions: {
            'js': 1,
            'jse': 1,
            'json': 1
        },
        
        contentTypes: {
            'baiduapp/json': 1,
            'text/javascript': 1,
            'application/javascript': 1,
            'application/ecmascript': 1,
            'application/x-ecmascript': 1,

            'text/html': 1,
            'application/xhtml+xml': 1
        }
    };

var Syntax = {
        AssignmentExpression: 'AssignmentExpression',//表达式: 赋值 (无需打桩)
        ArrayExpression: 'ArrayExpression',//表达式: 数组 [] (无需打桩)
        ArrayPattern: 'ArrayPattern',//??
        BlockStatement: 'BlockStatement',//块 静态块 {} (打桩)
        BinaryExpression: 'BinaryExpression',//*表达式: 运算1+2 (无需打桩)
        BreakStatement: 'BreakStatement',//*块 break块
        CallExpression: 'CallExpression',//表达式 函数调用 run() (无需打桩)
        CatchClause: 'CatchClause',//块 catch (无需打桩)
        ComprehensionBlock: 'ComprehensionBlock',//??
        ComprehensionExpression: 'ComprehensionExpression',//表达式 ??
        ConditionalExpression: 'ConditionalExpression',//表达式 条件 1? 1 : 0 (无需打桩)
        ContinueStatement: 'ContinueStatement',//*块 continue块
        DirectiveStatement: 'DirectiveStatement',//块 ??
        DoWhileStatement: 'DoWhileStatement',//块 (无需打桩，但无blockStatement时要主动加上)
        DebuggerStatement: 'DebuggerStatement',//*块 debugger;
        EmptyStatement: 'EmptyStatement',//*块 就是分号
        ExpressionStatement: 'ExpressionStatement',//块 (无需打桩)
        ForStatement: 'ForStatement',//块 for循环块 (无需打桩，但无blockStatement时要主动加上)
        ForInStatement: 'ForInStatement',//块 forIn块 (无需打桩，但无blockStatement时要主动加上)
        FunctionDeclaration: 'FunctionDeclaration',// fn声明 (无需打桩)
        FunctionExpression: 'FunctionExpression',//表达式 函数表达式 function(){} (无需打桩)
        Identifier: 'Identifier',//(无需打桩)
        IfStatement: 'IfStatement',//块 if块 (无需打桩，但无blockStatement时要主动加上)
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',//块 标签块，如：a: 100 (无需打桩)
        LogicalExpression: 'LogicalExpression',//表达式 逻辑表达式 0||1 (无需打桩)
        MemberExpression: 'MemberExpression',//表达式 出现在调用对象方法中 a.b() a为MemberExpression (无需打桩)
        NewExpression: 'NewExpression',//表达式 new表达式 (无需打桩)
        ObjectExpression: 'ObjectExpression',//表达式 对象表达式 {} (无需打桩)
        ObjectPattern: 'ObjectPattern',//??
        Program: 'Program', //(打桩)
        Property: 'Property',// (无需打桩)
        ReturnStatement: 'ReturnStatement',//*块 return块
        SequenceExpression: 'SequenceExpression',//表达式 顺序表达式 如: x=10, y=10; (无需打桩)
        SwitchStatement: 'SwitchStatement',//块 switch (无需打桩,无静态块表示)
        SwitchCase: 'SwitchCase', //switch-case块 (打桩)
        ThisExpression: 'ThisExpression',//表达式 this表达式 (无需打桩)
        ThrowStatement: 'ThrowStatement',//块 throw块 (无需打桩)
        TryStatement: 'TryStatement',//块 try块 (无需打桩)
        UnaryExpression: 'UnaryExpression',//表达式 '非'运算表达式 (无需打桩)
        UpdateExpression: 'UpdateExpression',//表达式 i++, i-- (无需打桩)
        VariableDeclaration: 'VariableDeclaration',// (无需打桩)
        VariableDeclarator: 'VariableDeclarator',// (无需打桩)
        WhileStatement: 'WhileStatement',//块 while块 (无需打桩，但无blockStatement时要主动加上)
        WithStatement: 'WithStatement',//with块 (无需打桩，但无blockStatement时要主动加上)
        YieldExpression: 'YieldExpression'//表达式 yield表达式
    };

function test(code){
    var ret, ast;
    try{
        ast = esprima.parse(code, options);
        ret = {status: 'OK', ast: ast};
    }catch(e){
        var match = errorRegx.test(e.message);
        ret = {
            status: match ? 'MaybeHtmlCommentError' : 'OtherError',
            error: e
        };
        match && utility.extend(ret, {
            errorMode: RegExp.$2,
            line: RegExp.$1 - 0
        });
    }
    return ret;
}


function getBlockStatement(){
    var args = [].slice.call(arguments),
        ret = {
            "type": "BlockStatement",
            "body": []
        };
    ret.body = ret.body.concat(args);
    return ret;
}

function getTrackerFunction(){
    return {
        "type": "ExpressionStatement",
        "expression": {
            "type": "CallExpression",
            "callee": {
                "type": "Identifier",
                "name": "_tracker_"
            },
            "arguments": []
        }
    };
}
/**
 * 
 */
var block_empty_if = [Syntax.BlockStatement, Syntax.EmptyStatement, Syntax.IfStatement].join(','),
    block_empty = [Syntax.BlockStatement, Syntax.EmptyStatement].join('');


/**
 * 打桩
 */
function recursion(stmt){
    
    if(!utility.isPlainObject(stmt)
        && !utility.isArray(stmt)){return;}
    //
    var clone = [],
        body = [],
        prop = 'body',
        item;
    /**
     * 规则
     * 如果是静态块，且body的第一个参数类型不是LabeledStatment, 开始处打桩，每个后面都打桩，但是需要排除掉一些[emptyStatement]
     * 如果是program 每个后面打桩
     * 如果是if, for, while, dowhile, with块，且无静态块且后面不是emptyStatement，需要增加静态块
     * SwitchCase 需要打桩
     * 
     * 打桩的注意不要在return,break,continue, void 后面打桩
     */
    //在这里为if, for, while, dowhile, with加入静态块，参加递归运算
    switch(stmt.type){
        case Syntax.IfStatement:
        case Syntax.ForInStatement:
        case Syntax.ForStatement:
        case Syntax.WhileStatement:
        case Syntax.DoWhileStatement:
        case Syntax.WithStatement:
            var isIfStmt = 'consequent' in stmt,
                array = isIfStmt ? ['consequent', 'alternate'] : ['body'],
                str = isIfStmt ? block_empty_if : block_empty;
            array.forEach(function(val){
                item = stmt[val];
                if(!item || ~str.indexOf(item.type)){return;}
                stmt[val] = getBlockStatement(item);
            });
            break;
        case Syntax.SwitchCase:
            prop = 'consequent';
        case Syntax.BlockStatement:
        case Syntax.Program:
            body = stmt[prop];
            break;
        default: break;
    }
    var isPlain = utility.isPlainObject(stmt);
    (isPlain ? Object.keys(stmt) : stmt).forEach(function(item, index){
//        if(isPlain && index === 'loc'){return;}
        isPlain && (item = stmt[item]);
        recursion(item);
    });
    //在这里打桩，防止桩也被加入到递归运算中
    if(!body.length || body[0].type === Syntax.LabeledStatement){
        return;
    }
    clone.push(getTrackerFunction())//在第一行打桩
    body.forEach(function(val, index){
        clone.push(val);
        switch(val.type){
            case Syntax.EmptyStatement:
            case Syntax.ReturnStatement:
            case Syntax.BreakStatement:
            case Syntax.ContinueStatement:
                break;
            default:
                clone.push(getTrackerFunction());
                break;
        }
    });
    stmt[prop] = clone;
}

/**
 * 取得请求的contentType
 */
function getContentType(headers){
    var type = headers['content-type']
            || headers['Content-Type']
            || '';
    return type.toLowerCase();
}

/**
 * 
 */
function getExtension(url){
    var fileType = url.match(rFileType);
    return fileType && fileType[1].toLowerCase();
}

function getFinalCode(content, codeId){
    var tpl = '_trackerStart_("%s");\n%s\n_trackerEnd_("%s");';
    return util.format(tpl, codeId, content, codeId);
}


/**
 * 
 */
function Interceptor(){
    events.EventEmitter.call(this);
}
util.inherits(Interceptor, events.EventEmitter);
utility.defineProperties(Interceptor.prototype, {
    esprima: function(code){
        var content = code,
            status, index, b, ret;
        while(true){
            ret = test(content);
            status = ret.status;
            if(status === 'OK'){
                return ret.ast;
            }else if(status === 'OtherError'){
//                console.log(c);
                throw ret.error;
            }else if(status === 'MaybeHtmlCommentError'){
                content = content.split( lineSpliter );
                index = ret.line - 1;
                b = content[index];
                if(ret.errorMode == '<' && ~b.indexOf(commentStart)){
                    content[index] = b.slice(0, b.lastIndexOf(commentStart));
                }else if(ret.errorMode == '>' && ~b.indexOf(commentEnd)){
                    content[index] = b.slice(0, b.lastIndexOf(commentEnd));
                }else{
                    throw ret.error;
                }
                content = content.join('\n');
            }
        }
    },
    
    escodegen: function(syntax){
        return escodegen.generate(syntax);
    },
    
    intercept: function(syntax){
        recursion(syntax);//对语法树进行改造
        return syntax;
    },
    
    isHtmlOrJavascript: function(headers, url){
        var me = this,
            contentType = getContentType(headers),
            mimeType = contentType.split(';')[0],
            ext = getExtension(url);
        return filterType.extensions[ext]
                || filterType.contentTypes[mimeType];
    },
    
    filter: function(content, request, headers){
        var me = this,
            contentType = getContentType(headers),
            mimeType = contentType.split(';')[0],
            url = request.url,
            ext = getExtension(url),
            isHtmlOrJs =  filterType.extensions[ext]
                || filterType.contentTypes[mimeType],
            //
            count = 0,
            origContent = content.toString(),
            isGbk, syntax, ident, formattedContent;
        if(!isHtmlOrJs || !origContent){return content;}
        if(~'text/html,application/xhtml+xml'.indexOf(mimeType)){//htmls
            //对内嵌代码进行处理
            //增加scoket.io
            content = origContent.replace(rHtml, function(mc){
                return mc + scriptArray.join('')
            });
        }else{//js
            //对外链js进行处理
            isGbk = ~contentType.indexOf('gb');
            isGbk && (origContent = iconv.decode(origContent, 'GBK'));
            
            try{//如果出错就直接返回代码
                ident = utility.getIdent();
                syntax = me.esprima(origContent);
                syntax = me.intercept(syntax);
                content = me.escodegen(syntax);
                formattedContent = content.replace(/_tracker_\(\);[\r\n]{0,2}/g, '');
                content = content.replace(/_tracker_\(\)/g, function(){
                    return '_tracker_("'+ ident +'", '+ (count++) +')';
                });
                content = util.format('_trackerStart_("%s");\n%s\n_trackerEnd_("%s");',
                    ident, content, ident);
                me.emit('filter:intercept', {
                    ident: ident,
                    url: url,
                    origContent: origContent,
                    formattedContent: formattedContent,
                    execContent: content
                });
            }catch(e){
               me._message = e.message;
               console.log('msg: ' + e.message);
            }
        }
        return content;
    }
});
exports.create = function(){return new Interceptor();}