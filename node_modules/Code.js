var utility = require('utility/utility'),
    rTracker = /_tracker_\(["'\d]+,\s(\d+)\)/;

function getArrivalIdMap(array){
    var ret = {},
        mc, key, ident, ary;
    array.forEach(function(item, index){
        mc = item.match(rTracker);
        ident = key = mc ? parseInt(mc[1]) : 0;
        if(!mc || !ident){return;}//不匹配或是第一行_tracker_时不做处理
        ary = ret[key] = [];
        while(!array[--index].match(rTracker)){
            ary.push(index - ident);
        }
    });
    return ret;
}

function Code(content, options){
    var me = this,
        opts = me._options = utility.extend({
            url : '-'
        }, options || {}),
        origContent = me._origContent = content || '',//原始代码
        execContent = me._execContent = opts.execContent || '',//页面可执行代码
        formattedTrackerCode = me._formattedTrackerCode = utility.splitToLine(execContent);//带tracker的代码行
        formattedTrackerCode.shift();//去掉tracker start
        formattedTrackerCode.pop();//去掉tracker end

        me._codeId = 'codeId_' + (opts.ident || utility.getIdent());
        me._formattedCode = utility.splitToLine(opts.formattedContent);//代码格式化成行
        me._executeMapping = new Array(me._formattedCode.length);//对应行的
        me._arrivalGroupMap = getArrivalIdMap(formattedTrackerCode);//tracker Id 对应的行数
        
        me._arrivalMapping = {};
        me._url = opts.url;
        me._fileName = utility.fileName(opts.url);
        
        me._refererId =
        me._startTime =
        me._endTime = null;
}
utility.defineProperties(Code.prototype, {
    getCodeId: function(){
        return this._codeId;
    },
    
    getOrigCode: function(){
        
    },
    
    getExecuteCode: function(){
        return this._executeCode;
    },
    
    getFormattedCode: function(){
        return this._formattedCode;
    },
    
    getExecuteMapping: function(){
        return this._executeMapping;
    },
    
    setReferer: function(refererId){
        this._refererId = refererId;
    },
    
    setStartTime: function(start){
        this._startTime = start;
    },
    
    setEndTime: function(end){
        this._endTime = end;
    },
    
    addArrivalId: function(arrivalId){
        var me = this,
            mapping = me._arrivalMapping,
            val = mapping[arrivalId],
            arrivalGroupMap = me._arrivalGroupMap[arrivalId];
        mapping[arrivalId] = val ? val + 1 : 1;
        //arrivalId > 0 的时候执行
        if(arrivalId === 106){
            require('fs').writeFileSync('c:/tracker/' + me._codeId + '.js', me._execContent, 'utf-8');
        }
        arrivalId && arrivalGroupMap.forEach(function(item){
            me._executeMapping[item] = true;
        });
    }
    
});

module.exports = Code;