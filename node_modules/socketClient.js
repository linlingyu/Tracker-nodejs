var config = require('config');
function clientCode(){
    var _tracker_,
        _trackerStart_,
        _trackerEnd_,
        _trackerError_,
        _fnStart_,
        _fnEnd_;
    void function(){
        var conf = $;
        var socket = window._socket_ = io.connect('http://' + conf.socketServer.host + ':' + conf.socketServer.port),
            url = location.href.split( "#" )[0],
            title = document.title,
            socketPlugins = _socketPlugins_ = [],
            keyTasks = [],
            tasks = [],
            limit = 2000,
            isConnect = false,//是否已经可以和服务端通信
            timer, pageLoadTime;
            
        socket.on('ready', onReady);//接收从服务发过来的请求，表示可以互相通信
        
        //发送数据
        function send(){
            var data;
            if(keyTasks.length){
                data = (data || []).concat(keyTasks);
                keyTasks = [];
            }
            if(tasks.length){
                data = (data || []).concat(tasks.splice(0, limit));
            }
//            data && console.log(data);
            data && socket.emit('send', data);
            clearTimeout(timer);
            timer = setTimeout(send, 500);
        }
        
        //页面加载完成后通知服务端开始生成数据
        function onPageLoad(){
            clearTimeout(pageLoadTime);
            pageLoadTime = setTimeout(function(){
                if(isConnect){
                    socket.emit('pageload', {taskId: window._taskId_});
                }else{
                    onPageLoad();
                }
            }, 1000);
        }
        
        function onReady(data){
            if(!data.ready){return;}
            isConnect = true;//可以连接
            send();//发送数据
            //数据生成完成，跳转到显示数据页面
            socket.on('finish', function(data){
                socket.disconnect();
                if(window._taskId_){//表示从phantomjs过来的，无需页面跳转
                    window._socketFinish_ && window._socketFinish_();
                }else{
                    window.open(conf.socketServer.clientURL + '?page=' + data.ident, '_blank'); 
                }
            });
        }
        
        //当页面加载完成后发送通知到服务端
        if(window.addEventListener){
            window.addEventListener('load', onPageLoad, false);
        }else if(window.attachEvent){
            window.attachEvent('onload', onPageLoad);
        }
        
        
        _tracker_ = function(ident, arrivalId){
            tasks.push({
                type: 'tracker',
                ident: ident,
                arrivalId: arrivalId
            });
        };
        _trackerStart_ = function(ident){
            keyTasks.push({
                type: 'trackerStart',
                ident: ident,
                url: url,
                title: title || (title = document.title),
                time: new Date().getTime()
            });
        };
        _trackerEnd_ = function(ident){
            tasks.push({
                type: 'trackerEnd',
                ident: ident,
                time: new Date().getTime()
            });
        };
        _trackerError_ = function(ident, msg){
            tasks.push({
                type: 'trackerError',
                ident: ident,
                msg: msg
            });
        };
        _fnStart_ = function(){
            
        };
        
        _fnEnd_ = function(){
            
        };
    }();
}

exports.getCode = function(){
    var client = clientCode.toString(),
        conf = JSON.stringify(config, null, 4);
    return client.slice(client.indexOf('{') + 1, client.length -2)
        .replace('$', conf);
}