var config = require('config'),
    util = require('util'),
    utility = require('utility/utility'),
    events = require('events'),
    http = require('http'),
    https = require('https'),
    url = require('url');
    
function getOptions(request){
    var opts = url.parse(request.url);
    request.headers.host = opts.host;
    request.headers.path =
    opts.path = opts.path || opts.pathname + (opts.search || '');
    opts.method = request.method;
    opts.agent = false;//去掉代理
    opts.headers = request.headers;
    delete opts.headers['accept-encoding'];//去掉gzip
    return opts;
}

function HttpServer(){
    events.EventEmitter.call(this);
}
util.inherits(HttpServer, events.EventEmitter);
utility.defineProperties(HttpServer.prototype, {
    getHttpServer: function(){
        return this._server;
    },
    
    start: function(port){
        var me = this,
            server = me._server = http.createServer(function(request, response){
            var body = [];
            request.on('data', function(chunk){
                body.push(chunk);
            });
            request.on('end', function(){
                var opts = getOptions(request),
                    req = (opts.protocol === 'http:' ? http : https).request(opts);
                
                req.on('response', function(res){
                    if(me.emit('onresponse', request, response, req, res)){return;}
//                    var headers = res.headers;
//                    for(var i in headers){
//                        response.setHeader(i, headers[i]);
//                    }
                    response.writeHeader(res.statusCode, res.headers);//import
                    var data = [];
                    res.on('data', function(chunk){data.push(chunk)});
                    res.on('end', function(){
                        var content = Buffer.concat(data);//取得内容
                        //插入事件
                        response.end(content);
                    });
                });
                req.on('error', function(error){});
                req.end(body.join(''));
            });
        });
        server.listen(port || config.httpServer.port);
        console.log('http server started');
        return this;
    },
    
    stop: function(){
        var me = this;
        me._server && me._server.stop();
        me._server = null;
        return this;
    }
});
exports.create = function(){
    return new HttpServer();
};